name: Build and Deploy to GKE

on:
  push:
    branches:
      - master

env:
  PROJECT_ID: ${{ secrets.PROJECT_ID }}
  PROJECT_NUMBER: ${{ secrets.PROJECT_NUMBER }}

  CLUSTER: ${{ secrets.CLUSTER }}
  CLUSTER_ZONE: ${{ secrets.CLUSTER_ZONE }}

  REPOSITORY:  ${{ secrets.REPOSITORY }}
  REPOSITORY_REGION:  ${{ secrets.REPOSITORY_REGION }}

  IMAGE: awesome-mvc

jobs:
  build:
    runs-on: self-hosted
    permissions:
      id-token: write
      contents: read

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    #
    # Authenticate to Google Cloud using workload identity federation
    #
    - id: 'auth'
      name: 'Obtain access token by using workload identity federation'
      uses: 'google-github-actions/auth@v0.4.0'
      with:
        create_credentials_file: true
        token_format: access_token
        workload_identity_provider:  projects/${{ env.PROJECT_NUMBER }}/locations/global/workloadIdentityPools/github-actions/providers/github-actions
        service_account: github-actions-workflow@${{ env.PROJECT_ID }}.iam.gserviceaccount.com

    - name: Install Docker
      run:  |
            sudo dnf config-manager --add-repo=https://download.docker.com/linux/centos/docker-ce.repo -y
            sudo yum install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin -y
            sudo usermod -aG docker $USER

            

    - name: Connect to Artifact Registry
      run: |-
        echo ${{ steps.auth.outputs.access_token }} | docker login -u oauth2accesstoken --password-stdin https://${{ env.REPOSITORY_REGION }}-docker.pkg.dev


        
    
      

    #
    # Build the .NET code
    #
    #- name: Build solution
     # run: |-
    #    dotnet publish applications/clouddemo/netcore/CloudDemo.MvcCore.sln \
    #        --configuration Release \
    #        --framework net6.0

    #
    # Build the Docker image and push it to Artifact Registry
    #
    - name: Create image tag
      run: echo "IMAGE_TAG=${{ env.REPOSITORY_REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}:$GITHUB_SHA" >> $GITHUB_ENV

    - name: Lock image version in deployment.yaml
      run: sed -i 's|awesome-mvc|${{ env.IMAGE_TAG }}|g'  webapp-helm-chart/templates/deployment.yaml

    - name: Build Docker image
      run: sudo docker build --tag "${{ env.IMAGE_TAG }}" .

    - name: Publish Docker image to Google Artifact Registry
      run: sudo docker push "${{ env.IMAGE_TAG }}"
    #- name:  Auth to pull docker image
    #  run: gcloud auth configure-docker us-east1-docker.pkg.dev
    - name: Connect to GKE
      uses: google-github-actions/get-gke-credentials@v0.4.0
      with:
        cluster_name: ${{ env.CLUSTER }}
        location: ${{ env.CLUSTER_ZONE }}
        
    - name: Install Helm
      run: |-
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
          chmod 700 get_helm.sh
          ./get_helm.sh

    - name: Deploy Helm Chart
      run: |
          helm upgrade --install  dotnet-release webapp-helm-chart/ --set image.repository=${{ env.REPOSITORY }}/${{ env.IMAGE }} 
